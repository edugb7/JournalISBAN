package com.isb.journal.controller;

import java.io.IOException;
import java.net.ConnectException;
import java.util.LinkedHashMap;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.HttpServerErrorException.InternalServerError;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import com.isb.journal.exception.ErrorInternal;
import com.isb.journal.exception.ErrorNotFound;
import com.isb.journal.exception.ErrorUnauthorized;

@ControllerAdvice(annotations = RestController.class)
public class ErrorRestController extends ResponseEntityExceptionHandler {
 
    @ExceptionHandler(value= {ErrorNotFound.class, IOException.class})
    public ResponseEntity<Object> springHandleNotFound(HttpServletResponse response) throws IOException {
    	
    	Map<String, Object> body = new LinkedHashMap<>();
        
        body.put("code", "404");
        body.put("message", "Not Found");
        body.put("level", "Error");
        body.put("description", "Input data are erroneus or no specified.");

        return new ResponseEntity<>(body, HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(value= {InternalServerError.class, ConnectException.class})
    public ResponseEntity<Object> notConnection(HttpServletResponse response) throws IOException {
    	
    	Map<String, Object> body = new LinkedHashMap<>();
        
        body.put("code", "500");
        body.put("message", "Internal Server Error");
        body.put("level", "Error");
        body.put("description", "The server encountred an internal error. Please retry the request.");

        return new ResponseEntity<>(body, HttpStatus.INTERNAL_SERVER_ERROR);
    }
    
    @ExceptionHandler(ErrorUnauthorized.class)
    public void springUnathorizedError(HttpServletResponse response) throws IOException {
        response.sendError(HttpStatus.UNAUTHORIZED.value());
    }
    
    @ExceptionHandler(ErrorInternal.class)
    public void springInternalError(HttpServletResponse response) throws IOException {
        response.sendError(HttpStatus.INTERNAL_SERVER_ERROR.value());
    }
    
    @Override
    protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,
           HttpHeaders headers, HttpStatus status, WebRequest request) {

        Map<String, Object> body = new LinkedHashMap<>();
        
        body.put("code", status.value());
        body.put("message", "Bad Request");
        body.put("level", "Error");
        body.put("description", "Input data are erroneus or no specified.");

        return new ResponseEntity<>(body, headers, status);

    }
}