package com.isb.journal.controller;

import java.io.IOException;
import java.util.List;
import java.util.UUID;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.isb.journal.entity.relacional.AccountingCostCenter;
import com.isb.journal.entity.relacional.JournalEntityOracle;
import com.isb.journal.entity.relacional.JournalOperationData;
import com.isb.journal.entity.relacional.JournalOperationRequest;
import com.isb.journal.entity.relacional.OperationAmount;
import com.isb.journal.entity.relacional.TargetCostCenter;
import com.isb.journal.entity.relacional.UserCostCenter;
import com.isb.journal.repository.RepositoryDataListDTO;
import com.isb.journal.repository.RepositoryOracleDTO;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;

@RestController()
@Validated
@RequestMapping("/journal_operations/oracle")
@Api(value = "Journal microservice", description = "This API has a CRUD for journal operations for MySQL DataBase")
public class ControllerOracle {
	
	JournalEntityOracle jourEnt;
	
	@Autowired
	private RepositoryOracleDTO dto;
	
	@Autowired
	private RepositoryDataListDTO dtoOp;
	
	@PostMapping(value="/create_journal_operation", produces = MediaType.APPLICATION_JSON_VALUE,
			consumes = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.CREATED)
    @ApiOperation(value = "Creating a new journal entity", notes = "Return a new journal entity")
	@ApiResponse(response = JournalEntityOracle.class, code = 200, message = "Succesfully creating a new journal entity")
	public JournalEntityOracle createEntityOracle(
			@RequestHeader(value = "X-IBM-Client-Id", required = true) String clientId,
			@RequestHeader(value = "X-Santander-Global-Id", required = false) String santanderGlobalId,
			@RequestHeader(value = "Authorization", required = true) String authorization,
			@Valid @RequestBody JournalEntityOracle journalEntityOracle) throws IOException {
		
		journalEntityOracle.getJournalOperationRequest().setId(journalEntityOracle.getJournalOperationId());
		
		for (JournalOperationData data : journalEntityOracle.getJournalOperationRequest().getJournalOperationList()) {
			dtoOp.save(data);
		}

		jourEnt = dto.save(journalEntityOracle);
		
		return jourEnt;
	}

	

	@PutMapping(value="/{journal_operation_id}")
	@ResponseStatus(HttpStatus.OK)
    @ApiOperation(value = "Update a journal entity", notes = "Update a journal entity by Id")
	@ApiResponse(response = JournalEntityOracle.class, code = 200, message = "Succesfully updating a journal entity")
	public JournalEntityOracle modidfyEntityOracle(
			@RequestHeader(value = "X-IBM-Client-Id", required = true) String clientId,
			@RequestHeader(value = "X-Santander-Global-Id", required = false) String santanderGlobalId,
			@RequestHeader(value = "Authorization", required = true) String authorization,
			@PathVariable("journal_operation_id") UUID id, 
			@Valid @RequestBody JournalEntityOracle journalEntityOracle) throws IOException {
			
		dto.findById(id)
			.map( entity -> {
				jourEnt = dto.save(saveChanges(journalEntityOracle, entity));
				return jourEnt;
			});
		return jourEnt;
	}
	
	
	@GetMapping(path="/{journal_operation_id}", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "Find an journal entity", notes = "Return a journal entity by Id")
	@ApiResponse(code = 200, message = "Succesfully getting a journal entitiy by Id")
	public ResponseEntity<Object> getByIdByOracle(@PathVariable(value="journal_operation_id") UUID id) throws IOException {
        
		return new ResponseEntity<>(dto.findById(id), HttpStatus.OK); 
	}
	
	@GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "Find all entities", notes = "Return all journal entities")
	@ApiResponse(code = 200, message = "Succesfully getting all journal entities")
	public ResponseEntity<Object> getAllByOracle() throws IOException {
		
        return new ResponseEntity<>(dto.findAll(), HttpStatus.OK);   
        
	}
	
	public JournalEntityOracle saveChanges(JournalEntityOracle entiPut, JournalEntityOracle entDataBase) {
		
		JournalOperationRequest jourEntPut = entiPut.getJournalOperationRequest();
		
		List<JournalOperationData> dataEntPut = jourEntPut.getJournalOperationList();
		List<JournalOperationData> dataBase = entDataBase.getJournalOperationRequest().getJournalOperationList();
		
		if(dataEntPut != null && !dataEntPut.equals(dataBase)) {
			
			dataBase.removeAll(dataBase);

			dataBase.addAll(dataEntPut);
			
//			for (JournalOperationData dataJour : dataBase) {
//	
//					dataJour.setCompanyCode(dataBase.get(0).getCompanyCode());
//					dataJour.setExternalReference(dataBase.get(0).getExternalReference());
//					dataJour.setInstanceCode(dataBase.get(0).getInstanceCode());	
//					dataJour.setJournalOperationType(dataBase.get(0).getJournalOperationType());
//					
//					dtoOp.save(dataJour);
//					
//					break;
//				
//			}
			dtoOp.saveAll(dataBase);
		}
		
		OperationAmount opAmount = (entDataBase.getJournalOperationRequest().getOperationAmount() == null) ? new OperationAmount() : entDataBase.getJournalOperationRequest().getOperationAmount();
		opAmount.setId(entDataBase.getJournalOperationId());
		opAmount.setAmount(jourEntPut.getOperationAmount().getAmount());
		opAmount.setCurrency(jourEntPut.getOperationAmount().getCurrency());
		entDataBase.getJournalOperationRequest().setOperationAmount(opAmount);
		
		AccountingCostCenter acCostCenter = new AccountingCostCenter();
		if(jourEntPut.getAccountingCostCenter() != null) {
			acCostCenter.setAccountingCenter(jourEntPut.getAccountingCostCenter().getAccountingCenter());
			acCostCenter.setAccountingCompany(jourEntPut.getAccountingCostCenter().getAccountingCompany());
		}
		acCostCenter.setId(entDataBase.getJournalOperationId());
		entDataBase.getJournalOperationRequest().setAccountingCostCenter(acCostCenter);
		
		TargetCostCenter tarCostCenter = new TargetCostCenter();
		if(jourEntPut.getTargetCostCenter() != null) {
			tarCostCenter.setTargetCenter(jourEntPut.getTargetCostCenter().getTargetCenter());
			tarCostCenter.setTargetCompany(jourEntPut.getTargetCostCenter().getTargetCompany());
		}
		tarCostCenter.setId(entDataBase.getJournalOperationId());
		entDataBase.getJournalOperationRequest().setTargetCostCenter(tarCostCenter);
		
		UserCostCenter useCostCenter = new UserCostCenter();
		if(jourEntPut.getUserCostCenter() != null) {
			useCostCenter.setUserCenter(jourEntPut.getUserCostCenter().getUserCenter());
			useCostCenter.setUserCompany(jourEntPut.getUserCostCenter().getUserCompany());
		}
		useCostCenter.setId(entDataBase.getJournalOperationId());
		entDataBase.getJournalOperationRequest().setUserCostCenter(useCostCenter);
		
		entDataBase.getJournalOperationRequest().setPostingType(jourEntPut.getPostingType());
		
		return entDataBase;
	}

}
