package com.isb.journal.controller;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.isb.journal.entity.relacional.JournalEntityOracle;
import com.isb.journal.service.JournalServiceOracle;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;

@RestController()
@Validated
@RequestMapping("/journal_operations/oracle")
@Api(value = "Journal microservice", description = "This API has a CRUD for journal operations for MySQL DataBase")
public class ControllerOracle {

	@Autowired
	private JournalServiceOracle dto;
	
	@PostMapping(value="/create_journal_operation", produces = MediaType.APPLICATION_JSON_VALUE,
			consumes = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.CREATED)
    @ApiOperation(value = "Creating a new journal entity", notes = "Return a new journal entity")
	@ApiResponse(response = JournalEntityOracle.class, code = 200, message = "Succesfully creating a new journal entity")
	public JournalEntityOracle createEntityOracle(
			@RequestHeader(value = "X-IBM-Client-Id", required = true) String clientId,
			@RequestHeader(value = "X-Santander-Global-Id", required = false) String santanderGlobalId,
			@RequestHeader(value = "Authorization", required = true) String authorization,
			@Valid @RequestBody JournalEntityOracle journalEntityOracle) throws Exception {

		JournalEntityOracle jourEnt = new JournalEntityOracle();

		if(dto.findByIdOracle(journalEntityOracle.getId()) == null) {
		
			dto.saveOracle(journalEntityOracle);
		} else {
			throw new Exception();
		}
		
		return jourEnt;
	}
	
	@PutMapping(value="/{journal_operation_id}")
	@ResponseStatus(HttpStatus.OK)
    @ApiOperation(value = "Update a journal entity", notes = "Update a journal entity by Id")
	@ApiResponse(response = JournalEntityOracle.class, code = 200, message = "Succesfully updating a journal entity")
	public JournalEntityOracle modidfyEntityOracle(
			@RequestHeader(value = "X-IBM-Client-Id", required = true) String clientId,
			@RequestHeader(value = "X-Santander-Global-Id", required = false) String santanderGlobalId,
			@RequestHeader(value = "Authorization", required = true) String authorization,
			@PathVariable("journal_operation_id") Integer id, 
			@Valid @RequestBody JournalEntityOracle journalEntityOracle) {
		
		//TODO comprobar validacion de entidad
		
		journalEntityOracle.setId(id);
		
		return dto.saveOracle(journalEntityOracle);

	}
	
	@GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "Find all entities", notes = "Return all journal entities")
	@ApiResponse(code = 200, message = "Succesfully getting all journal entities")
	public ResponseEntity<Object> getAllByOracle() throws Exception {
		
       return new ResponseEntity<>(dto.findAllOracle(), HttpStatus.OK);  
	}
    
	@GetMapping(path="/{journal_operation_id}", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "Find an journal entity", notes = "Return a journal entity by Id")
	@ApiResponse(code = 200, message = "Succesfully getting a journal entitiy by Id")
	public ResponseEntity<Object> getByIdByOracle(@PathVariable(value="journal_operation_id") Integer id) throws Exception  {
	
		
		JournalEntityOracle jourEnt = dto.findByIdOracle(id);

        return new ResponseEntity<>(jourEnt, HttpStatus.OK);

	}

}
