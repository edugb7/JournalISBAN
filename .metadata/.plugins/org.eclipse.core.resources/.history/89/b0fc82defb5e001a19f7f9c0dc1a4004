package com.isb.conciliator.controller;

import java.util.UUID;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.isb.conciliator.entity.ConciliatorEntity;
import com.isb.conciliator.exception.BadRequestError;
import com.isb.conciliator.exception.ErrorNotFound;
import com.isb.conciliator.repository.RepositoryDTO;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;

@RestController()
@Validated
@RequestMapping("/movements_conciliator/")
@Api(value = "Global Movements Concicliator microservice")
public class Controller {

	ConciliatorEntity concEnt = new ConciliatorEntity();
	
	@Autowired
	private RepositoryDTO dto;
	
	@PostMapping(path="/create_movement", produces = MediaType.APPLICATION_JSON_VALUE,
			consumes = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.CREATED)
    @ApiOperation(value = "Creating a new movement conciliator", notes = "Return a new movement conciliator")
	@ApiResponse(response = ConciliatorEntity.class, code = 200, message = "Succesfully creating a new movement")
	public ConciliatorEntity createMovement(
			@RequestHeader(value = "X-IBM-Client-Id", required = true) String clientId,
			@RequestHeader(value = "X-Santander-Global-Id", required = false) String santanderGlobalId,
			@RequestHeader(value = "Authorization", required = true) String authorization,
			@Valid @RequestBody ConciliatorEntity conciliatorEntity){

		try {
			concEnt = dto.save(conciliatorEntity);
		} catch (DataIntegrityViolationException e) {
			throw new BadRequestError();
		}
		
		return concEnt;
	}

	@GetMapping(path="/{journalOperationId}", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "Find an movement", notes = "Return a movement by Id")
	@ApiResponse(code = 200, message = "Succesfully getting a movement by Id")
	public ResponseEntity<Object> getById(@PathVariable(value="journalOperationId") UUID id) {
		
		try {
			concEnt = dto.findById(id).orElse(null);
		} catch (DataIntegrityViolationException e) {
			throw new ErrorNotFound();
		}

        return new ResponseEntity<>(concEnt, HttpStatus.OK); 

	}

	@DeleteMapping(value = "/{journalOperationId}", produces = MediaType.APPLICATION_JSON_VALUE)
	@ApiOperation(value = "Deleting a movement conciliator", notes = "Return an empty result")
	@ApiResponse(code = 200, message = "Succesfully deleting the movement")
	public void delete(
			@RequestHeader(value = "X-IBM-Client-Id", required = true) String clientId,
			@RequestHeader(value = "X-Santander-Global-Id", required = false) String santanderGlobalId,
			@RequestHeader(value = "Authorization", required = true) String authorization,
			@PathVariable(value = "journalOperationId") UUID id) throws ErrorNotFound {

		dto.deleteById(id);

	}
	
}

